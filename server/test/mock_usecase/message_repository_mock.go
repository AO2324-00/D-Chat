// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/message_repository.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/kindai-csg/D-Chat/domain"
	reflect "reflect"
)

// MockMessageRepository is a mock of MessageRepository interface.
type MockMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRepositoryMockRecorder
}

// MockMessageRepositoryMockRecorder is the mock recorder for MockMessageRepository.
type MockMessageRepositoryMockRecorder struct {
	mock *MockMessageRepository
}

// NewMockMessageRepository creates a new mock instance.
func NewMockMessageRepository(ctrl *gomock.Controller) *MockMessageRepository {
	mock := &MockMessageRepository{ctrl: ctrl}
	mock.recorder = &MockMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageRepository) EXPECT() *MockMessageRepositoryMockRecorder {
	return m.recorder
}

// StoreMessage mocks base method.
func (m *MockMessageRepository) StoreMessage(arg0 domain.Message) (domain.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMessage", arg0)
	ret0, _ := ret[0].(domain.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreMessage indicates an expected call of StoreMessage.
func (mr *MockMessageRepositoryMockRecorder) StoreMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMessage", reflect.TypeOf((*MockMessageRepository)(nil).StoreMessage), arg0)
}

// DeleteMessage mocks base method.
func (m *MockMessageRepository) DeleteMessage(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockMessageRepositoryMockRecorder) DeleteMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockMessageRepository)(nil).DeleteMessage), arg0)
}

// UpdateText mocks base method.
func (m *MockMessageRepository) UpdateText(arg0 domain.Message) (domain.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateText", arg0)
	ret0, _ := ret[0].(domain.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateText indicates an expected call of UpdateText.
func (mr *MockMessageRepositoryMockRecorder) UpdateText(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateText", reflect.TypeOf((*MockMessageRepository)(nil).UpdateText), arg0)
}
